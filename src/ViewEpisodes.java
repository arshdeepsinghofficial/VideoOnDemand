
import java.awt.event.ItemEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Yashika
 */
public class ViewEpisodes extends javax.swing.JInternalFrame
{

    /**
     * Creates new form ViewEpisodes
     */
    ArrayList<Episode> almovies = new ArrayList<>();
    MovieTableModel mtm = new MovieTableModel();
    JFileChooser ch;
    File f;
    ArrayList<Episode> tvshows;

    public ViewEpisodes()
    {
        initComponents();
        cbselecttvshow();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        cbtvshows = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtepisodes = new javax.swing.JTable();
        btrefresh = new javax.swing.JButton();
        btedit = new javax.swing.JButton();
        btdelete = new javax.swing.JButton();

        cbtvshows.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                cbtvshowsItemStateChanged(evt);
            }
        });

        jLabel1.setText("Select TV Show");

        jScrollPane1.setViewportView(jtepisodes);

        btrefresh.setText("Refresh");
        btrefresh.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btrefreshActionPerformed(evt);
            }
        });

        btedit.setText("Edit TV Show");
        btedit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bteditActionPerformed(evt);
            }
        });

        btdelete.setText("Delete Tv Show");
        btdelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btdeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btedit, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(btrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbtvshows, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbtvshows, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btedit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbtvshowsItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cbtvshowsItemStateChanged
    {//GEN-HEADEREND:event_cbtvshowsItemStateChanged
        String tvshow=cbtvshows.getSelectedItem()+"";
        try
        {
        Class.forName("com.mysql.jdbc.Driver");
        Connection conn=DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/vod","root","system");
        Statement stmt=conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
        ResultSet rs=stmt.executeQuery("select * from video where title='"+tvshow+"'");
        if(rs.next());
        {
        String vid=rs.getInt("id")+""; 
        fetchEpisodes(vid);
        }
        }
        catch(Exception ex)
        {
          ex.printStackTrace();
        }
    }//GEN-LAST:event_cbtvshowsItemStateChanged

    private void btrefreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btrefreshActionPerformed
    {//GEN-HEADEREND:event_btrefreshActionPerformed
        int selectedIndex = cbtvshows.getSelectedIndex();
//        if (selectedIndex == 0)
//        {
//            return;
//        }
        String vid = almovies.get(selectedIndex ).vid;
        fetchEpisodes((vid));
    }//GEN-LAST:event_btrefreshActionPerformed

    private void bteditActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bteditActionPerformed
    {//GEN-HEADEREND:event_bteditActionPerformed
        int index = jtepisodes.getSelectedRow();
        if (index == -1)
        {
            JOptionPane.showMessageDialog(rootPane, "Please select episode to Edit");
        } else
        {
            EditEpisodes obj=new EditEpisodes(tvshows.get(index).title,tvshows.get(index).videopath,tvshows.get(index).coverphoto,tvshows.get(index).squarephoto,tvshows.get(index).duration,cbtvshows.getSelectedItem(),tvshows.get(index).eid);
            obj.setIconifiable(true);
            obj.setMaximizable(true);
            obj.setClosable(true);
            obj.setSize(641, 505);
            this.getDesktopPane().add(obj);
            obj.moveToFront();
            obj.setVisible(true);
        }
    }//GEN-LAST:event_bteditActionPerformed

    private void btdeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btdeleteActionPerformed
    {//GEN-HEADEREND:event_btdeleteActionPerformed
        // TODO add your handling code here:
        int index = jtepisodes.getSelectedRow();
        if (index == -1)
        {
            JOptionPane.showMessageDialog(rootPane, "Please select Episode to delete");
        } else
        {
            int eid = tvshows.get(index).eid;
            int confirm = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete?");
            if (confirm == JOptionPane.YES_OPTION)
            {
                try
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    System.out.println("Driver loading done");
                    Connection mynewconn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/vod", "root", "system");
                    System.out.println("connection created");
                    Statement stmt = mynewconn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    System.out.println("statement created");
                    ResultSet rs = stmt.executeQuery("select * from episodes where eid='" + eid + "' ");
                    System.out.println("result set created\n\n");
                    if (rs.next())
                    {
                        rs.deleteRow();
                        tvshows.remove(index);
                      //  mtm.fireTableDataChanged();
                        JOptionPane.showMessageDialog(rootPane, "Episode Deleted Successfully");
                    }

                } catch (Exception e)
                {
                    e.printStackTrace();
                }
            }

        }
    }//GEN-LAST:event_btdeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btdelete;
    private javax.swing.JButton btedit;
    private javax.swing.JButton btrefresh;
    private javax.swing.JComboBox<String> cbtvshows;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtepisodes;
    // End of variables declaration//GEN-END:variables

    public void cbselecttvshow()
    {
       
        try
        {
            
            Class.forName("com.mysql.jdbc.Driver");
            Connection mynewconn = DriverManager.
                    getConnection("jdbc:mysql://127.0.0.1:3306/vod", "root", "system");
            Statement stmt = mynewconn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = stmt.executeQuery("select * from video where cname='TV Shows'");

           
            while (rs.next())
            {
              almovies.add(new Episode(0,0,rs.getString("title"),"","","","",rs.getString("id")));
              String title=rs.getString("title");
              cbtvshows.addItem(title);
            }

        } catch (Exception e)
        {
            e.printStackTrace();
        }
      
    }
    
    
    private void fetchEpisodes(String vid)
    {
        
        tvshows=new ArrayList<>();
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection mynewconn = DriverManager.
                    getConnection("jdbc:mysql://127.0.0.1:3306/vod", "root", "system");
            Statement stmt = mynewconn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = stmt.executeQuery("select * from episodes where vid='" + Integer.parseInt(vid) + "'");
            int s=1;
            while (rs.next())
            {
                int eid = rs.getInt("eid");
                String video_title = rs.getString("title");
                String videopath = rs.getString("videopath");
                String cpath = rs.getString("cover");
                String spath = rs.getString("square");
                String duration = rs.getString("duration");

                Episode episode= new Episode(s,eid,video_title,videopath, cpath, spath,duration,vid);
                tvshows.add(episode);
                s++;
               
            }
             jtepisodes.setModel(mtm);
                mtm.fireTableDataChanged();
        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }
   class Episode
   {
       int s;
       int eid;
       String title;
       String coverphoto;
       String squarephoto;
       String videopath;
       String vid;
       String duration;
       
       Episode(int s,int eid,String title,String videopath,String coverphoto,String squarephoto,String duration,String vid)
       {
           this.s=s;
           this.eid=eid;
           this.title=title;
           this.squarephoto=squarephoto;
           this.coverphoto=coverphoto;
           this.videopath=videopath;
           this.duration=duration;
           this.vid=vid;
       }
           
    }
    class MovieTableModel extends AbstractTableModel
    {

        String colnames[] ={"Sr no.","Episode Title","Duration","Video Path"};
        
        public int getRowCount()
        {
            return tvshows.size();
        }
        public int getColumnCount()
        {
            return colnames.length;
        }
        public Object getValueAt(int rowIndex, int columnIndex)
        {
            Episode e = tvshows.get(rowIndex);
            if (columnIndex == 0)
            {
                return e.s;
            } else if (columnIndex == 1)
            {
                return e.title;
            } else if (columnIndex == 2)
            {
                return e.duration;
            } else 
            {
                return e.videopath;
            }
         }
        public String getColumnName(int column)
        {
            return colnames[column]; 
        }
    
    }

}
