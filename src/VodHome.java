/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author hp
 */
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.net.*;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JScrollBar;

public class VodHome extends javax.swing.JFrame
{

    /**
     * Creates new form VodHome
     */
    ArrayList<Movies> al;
    ArrayList<Movies> al1;

    public VodHome()
    {
        this.setLayout(null);
        al = new ArrayList<>();
        al1 = new ArrayList<>();
        initComponents();
        
        
        this.setTitle("Home");
        this.setVisible(true);
        this.setSize(859,700);
        setLocationRelativeTo(null);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        new Thread(new FetchMovies()).start();
        
                 
             
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        lbsquare = new javax.swing.JLabel();
        jpane = new javax.swing.JScrollPane();
        jpall = new javax.swing.JPanel();
        lbcover = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        lbtv1 = new javax.swing.JLabel();
        lbtv2 = new javax.swing.JLabel();
        lbtv3 = new javax.swing.JLabel();
        lbtv4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbm1 = new javax.swing.JLabel();
        lbm2 = new javax.swing.JLabel();
        lbm3 = new javax.swing.JLabel();
        lbm4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);
        getContentPane().add(lbsquare);
        lbsquare.setBounds(20, 170, 210, 120);

        jpane.setViewportView(jpall);

        getContentPane().add(jpane);
        jpane.setBounds(10, 340, 840, 150);

        lbcover.setText("jLabel1");
        getContentPane().add(lbcover);
        lbcover.setBounds(10, 11, 830, 320);

        jPanel2.setLayout(null);

        lbtv1.setIconTextGap(15);
        lbtv1.setPreferredSize(new java.awt.Dimension(200, 120));
        jPanel2.add(lbtv1);
        lbtv1.setBounds(40, 5, 200, 120);

        lbtv2.setPreferredSize(new java.awt.Dimension(200, 120));
        jPanel2.add(lbtv2);
        lbtv2.setBounds(280, 5, 200, 120);

        lbtv3.setPreferredSize(new java.awt.Dimension(200, 120));
        jPanel2.add(lbtv3);
        lbtv3.setBounds(520, 5, 200, 120);

        lbtv4.setPreferredSize(new java.awt.Dimension(80, 50));
        lbtv4.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                lbtv4MousePressed(evt);
            }
        });
        jPanel2.add(lbtv4);
        lbtv4.setBounds(750, 50, 80, 50);

        jTabbedPane1.addTab("TV Shows", jPanel2);

        jPanel1.setLayout(null);

        lbm1.setOpaque(true);
        lbm1.setPreferredSize(new java.awt.Dimension(200, 120));
        jPanel1.add(lbm1);
        lbm1.setBounds(40, 5, 200, 120);

        lbm2.setPreferredSize(new java.awt.Dimension(200, 120));
        jPanel1.add(lbm2);
        lbm2.setBounds(280, 5, 200, 120);

        lbm3.setPreferredSize(new java.awt.Dimension(200, 120));
        jPanel1.add(lbm3);
        lbm3.setBounds(520, 5, 200, 120);

        lbm4.setPreferredSize(new java.awt.Dimension(80, 50));
        lbm4.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                lbm4MousePressed(evt);
            }
        });
        jPanel1.add(lbm4);
        lbm4.setBounds(750, 50, 80, 50);

        jTabbedPane1.addTab("Movies", jPanel1);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 500, 840, 160);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lbtv4MousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lbtv4MousePressed
    {//GEN-HEADEREND:event_lbtv4MousePressed
        ViewAllTVShows allTVShows=new ViewAllTVShows(al1);
        allTVShows.setVisible(true);
    }//GEN-LAST:event_lbtv4MousePressed

    private void lbm4MousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lbm4MousePressed
    {//GEN-HEADEREND:event_lbm4MousePressed
        ViewAllMovies allMovies=new ViewAllMovies(al);
        allMovies.setVisible(true);
    }//GEN-LAST:event_lbm4MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(VodHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(VodHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(VodHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(VodHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new VodHome().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jpall;
    private javax.swing.JScrollPane jpane;
    private javax.swing.JLabel lbcover;
    private javax.swing.JLabel lbm1;
    private javax.swing.JLabel lbm2;
    private javax.swing.JLabel lbm3;
    private javax.swing.JLabel lbm4;
    private javax.swing.JLabel lbsquare;
    private javax.swing.JLabel lbtv1;
    private javax.swing.JLabel lbtv2;
    private javax.swing.JLabel lbtv3;
    private javax.swing.JLabel lbtv4;
    // End of variables declaration//GEN-END:variables

    class FetchMovies implements Runnable
    {

        @Override
        public void run()
        {
            fetchMovies();
        }

        public void fetchMovies()
        {
            try
            {
                Socket sock = new Socket("127.0.0.1", 4200);
                DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                DataInputStream dis = new DataInputStream(sock.getInputStream());
                dos.writeBytes("sendmovies\r\n");

                while (true)
                {
                    String response = dis.readLine();
                    
                    if (response.equals("receive"))
                    {
                        String cname = dis.readLine();
                        String genre = dis.readLine();
                        String producer = dis.readLine();
                        String director = dis.readLine();
                        String storyline = dis.readLine();
                        String releasedate = dis.readLine();
                        String id = dis.readLine();
                        String title = dis.readLine();
                        String duration = dis.readLine();
                        String rating = dis.readLine();
                        String language = dis.readLine();
                        String coverphoto = dis.readLine();
                        String cast = dis.readLine();
                        String squarephoto = dis.readLine();
                        String videopath = dis.readLine();
                        String trailerpath = dis.readLine();
                        if (cname.equals("Movies"))
                        {
                            al.add(new Movies(cname, genre, producer, director, storyline, releasedate, id, title, duration,
                                    rating, language, coverphoto, cast, squarephoto, videopath, trailerpath));
                          
                            
                        } else if (cname.equals("TV Shows"))
                        {
                            al1.add(new Movies(cname, genre, producer, director, storyline, releasedate, id, title, duration,
                                    rating, language, coverphoto, cast, squarephoto, videopath, trailerpath));
                            
                        }
                    } else if (response.equals("done"))
                    {
                      break;
                    }
                }

                
                int x=10;
                for(int i=0;i<=al.size()-1;i++)
                {
                    
                    Movies m=al.get(i);
                    String coverphoto=m.coverphoto;
                    SingleMovie sm=new SingleMovie(m);
                  //  sm.lbmovies.setText(coverphoto);
                    sm.setBounds(x,10,280,120);
                    
                    try
                    {
                        Image img = ImageIO.read(new File(coverphoto)).getScaledInstance(sm.getWidth(),sm.getHeight(), Image.SCALE_SMOOTH);
                        ImageIcon icon = new ImageIcon(img);
                        sm.lbmovies.setIcon(icon);
                        sm.addMouseListener(new MouseAdapter()
                        {
                           public void mouseClicked(MouseEvent e)
                           {
                              LaunchMovies launchmovies=new LaunchMovies(m);
                              launchmovies.setVisible(true);
                              launchmovies.setSize(650,530);
                              
                           }
                        });
                    } catch (Exception e)
                    {
                      //  e.printStackTrace();
                    }
                    
                    jpall.add(sm);
                    jpall.repaint();
                    x=x+290;
                    
                }
                 new Thread(new MoveBar()).start();
                 new Thread(new Movie()).start();
                 new Thread(new TVShow()).start();
             new Thread(new MovePhotos()).start();
            
             
            } catch (Exception e)
            {
               // e.printStackTrace();
            }
        }

    }

    class MovePhotos implements Runnable
    {

        public void run()
        {
            movePhotos();
        }

        public void movePhotos()
        {
            int turn=1;
            while(true)
            {
            
            if(turn==1)
            for(int i=0;i<=al.size()-1;i++)
            {
              lbcover.setText(al.get(i).coverphoto);
                lbsquare.setText(al.get(i).squarephoto);
                try
                {
                   
                     
                    Image img = ImageIO.read(new File(lbcover.getText())).getScaledInstance(lbcover.getWidth(), lbcover.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon icon = new ImageIcon(img);
                    lbcover.setIcon(icon);

                    Image img1 = ImageIO.read(new File(lbsquare.getText())).getScaledInstance(lbsquare.getWidth(), lbsquare.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon icon1 = new ImageIcon(img1);
                    lbsquare.setIcon(icon1);
                    Thread.sleep(1500);
                    if(i==al.size()-1)
                        turn=2;
                } catch (Exception e)
                {
                  //  e.printStackTrace();
                }  
            }
            else
            {
              for(int i=al.size()-1;i>=0;i--)
            {
              lbcover.setText(al.get(i).coverphoto);
                lbsquare.setText(al.get(i).squarephoto);
                try
                {
                   
                     
                    Image img = ImageIO.read(new File(lbcover.getText())).getScaledInstance(lbcover.getWidth(), lbcover.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon icon = new ImageIcon(img);
                    lbcover.setIcon(icon);

                    Image img1 = ImageIO.read(new File(lbsquare.getText())).getScaledInstance(lbsquare.getWidth(), lbsquare.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon icon1 = new ImageIcon(img1);
                    lbsquare.setIcon(icon1);

                    
                    Thread.sleep(1500);
                } catch (Exception e)
                {
                  //  e.printStackTrace();
                }  
            }  
            }
            }
            
        }
                
                   
                
    }
    class Movie implements Runnable
    {
        public void run()
        {
            try
            {
                Movies m=al.get(0);
                String cphoto=m.coverphoto;
                Image img = ImageIO.read(new File(cphoto)).getScaledInstance(lbm1.getWidth(), lbm2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon = new ImageIcon(img);
                lbm1.setIcon(icon);
                Movies m1=al.get(1);
                String cphoto1=m1.coverphoto;
                Image img1 = ImageIO.read(new File(cphoto1)).getScaledInstance(lbm2.getWidth(), lbm2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon1 = new ImageIcon(img1);
                lbm2.setIcon(icon1);
                Movies m2=al.get(2);
                String cphoto2=m2.coverphoto;
                Image img2 = ImageIO.read(new File(cphoto2)).getScaledInstance(lbm3.getWidth(), lbm3.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon2 = new ImageIcon(img2);
                lbm3.setIcon(icon2);
                Movies m3=al.get(3);
                String cphoto3="C:\\Users\\hp\\Documents\\NetBeansProjectsv\\VideoOnDemand\\images\\viewall.png";
                Image img3 = ImageIO.read(new File(cphoto3)).getScaledInstance(lbm4.getWidth(), lbm4.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon3 = new ImageIcon(img3);
                lbm4.setIcon(icon3);
       
            } catch (Exception e)
            {
            }
      
        }
    }
    class TVShow implements Runnable
    {
        public void run()
        {
            try
            {
                Movies m=al1.get(0);
                String cphoto=m.coverphoto;
                Image img = ImageIO.read(new File(cphoto)).getScaledInstance(lbtv1.getWidth(), lbtv2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon = new ImageIcon(img);
                lbtv1.setIcon(icon);
                Movies m1=al1.get(1);
                String cphoto1=m1.coverphoto;
                Image img1 = ImageIO.read(new File(cphoto1)).getScaledInstance(lbtv2.getWidth(), lbtv2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon1 = new ImageIcon(img1);
                lbtv2.setIcon(icon1);
                Movies m2=al1.get(2);
                String cphoto2=m2.coverphoto;
                Image img2 = ImageIO.read(new File(cphoto2)).getScaledInstance(lbtv3.getWidth(), lbtv3.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon2 = new ImageIcon(img2);
                lbtv3.setIcon(icon2);
              //  Movies m3=al1.get(3);
                String cphoto3="C:\\Users\\hp\\Documents\\NetBeansProjectsv\\VideoOnDemand\\images\\viewall.png";
                Image img3 = ImageIO.read(new File(cphoto3)).getScaledInstance(lbtv4.getWidth(), lbtv4.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon3 = new ImageIcon(img3);
                lbtv4.setIcon(icon3);
       
            } catch (Exception e)
            {
              //  e.printStackTrace();
            }
  
        }
        
    }
    class MoveBar implements Runnable
        {
            public void run()
            {
              {
                        JScrollBar horizontalScrollBar= jpane.getHorizontalScrollBar();
                        int max=horizontalScrollBar.getMaximum();
                        int extend=horizontalScrollBar.getModel().getExtent();
                        try
                        {
                            int turn=1;
                          while(true)
                        {
                            
                            if(turn==1)
                            {
                                int value1=horizontalScrollBar.getModel().getValue();
                            try
                            {
                               
                                horizontalScrollBar.getModel().setValue(value1+5);
                            }catch(Exception e)
                            {
                              //  e.printStackTrace();
                            }
                            int value2=max-extend;
                            if(value1==value2)
                            {
                                turn=2;
                            }
                            }
                            else if(turn==2)
                            {
                               int value1=horizontalScrollBar.getValue();
                               try
                               {
                               horizontalScrollBar.getModel().setValue(value1-5);
                               }catch(Exception e)
                               {
                                 // e.printStackTrace();
                               }
                              // int min=horizontalScrollBar.getMinimum();
                               if(value1==0)
                               {
                                   turn=1;
                               }
                            }
                            
                            Thread.sleep(30);
                        }
                        } catch (Exception e)
                        {
                          //  e.printStackTrace();
                        }
              }  
            }
        }
}
